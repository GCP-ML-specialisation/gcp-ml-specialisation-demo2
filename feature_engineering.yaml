# PIPELINE DEFINITION
# Name: data-transformation
# Inputs:
#    df_test: system.Dataset
#    df_train: system.Dataset
# Outputs:
#    dataset_test: system.Dataset
#    dataset_train: system.Dataset
components:
  comp-data-transformation:
    executorLabel: exec-data-transformation
    inputDefinitions:
      artifacts:
        df_test:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
        df_train:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
    outputDefinitions:
      artifacts:
        dataset_test:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
        dataset_train:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
deploymentSpec:
  executors:
    exec-data-transformation:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - data_transformation
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.7.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'pandas' 'gcsfs'\
          \ 'scikit-learn' 'numpy' && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef data_transformation(\n    df_train: Input[Dataset],\n    df_test:\
          \ Input[Dataset],\n    dataset_train: Output[Dataset],\n    dataset_test:\
          \ Output[Dataset],\n):\n\n    import pandas as pd\n    from sklearn.preprocessing\
          \ import LabelEncoder\n    import numpy as np\n\n    df_train = pd.read_csv(df_train.path\
          \ + \".csv\")\n    df_test = pd.read_csv(df_test.path + \".csv\")\n\n  \
          \  # Handle categorical to integer transformation for 'Gender'\n    gender_mapping\
          \ = {\"F\": 0, \"M\": 1}\n    df_train[\"Gender\"] = df_train[\"Gender\"\
          ].map(gender_mapping)\n    df_test[\"Gender\"] = df_test[\"Gender\"].map(gender_mapping)\n\
          \n    # Columns to encode\n    cols = [\"Age\", \"City_Category\", \"Stay_In_Current_City_Years\"\
          ]\n\n    # Combine train and test for consistent encoding\n    combined_df\
          \ = pd.concat([df_train[cols], df_test[cols]], axis=0)\n\n    # Initialize\
          \ the LabelEncoder\n    le = LabelEncoder()\n\n    # Apply LabelEncoder\
          \ to each column and transform back to DataFrame\n    for col in cols:\n\
          \        combined_df[col] = le.fit_transform(combined_df[col])\n\n    #\
          \ Split the combined data back into train and test sets\n    df_train[cols]\
          \ = combined_df.iloc[: len(df_train), :]\n    df_test[cols] = combined_df.iloc[len(df_train)\
          \ :, :]\n\n    df_train[\"Purchase\"] = np.log1p(df_train[\"Purchase\"])\n\
          \n    df_train.to_csv(dataset_train.path + \".csv\", index=False)\n    df_test.to_csv(dataset_test.path\
          \ + \".csv\", index=False)\n\n"
        image: python:3.9
pipelineInfo:
  name: data-transformation
root:
  dag:
    outputs:
      artifacts:
        dataset_test:
          artifactSelectors:
          - outputArtifactKey: dataset_test
            producerSubtask: data-transformation
        dataset_train:
          artifactSelectors:
          - outputArtifactKey: dataset_train
            producerSubtask: data-transformation
    tasks:
      data-transformation:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-data-transformation
        inputs:
          artifacts:
            df_test:
              componentInputArtifact: df_test
            df_train:
              componentInputArtifact: df_train
        taskInfo:
          name: data-transformation
  inputDefinitions:
    artifacts:
      df_test:
        artifactType:
          schemaTitle: system.Dataset
          schemaVersion: 0.0.1
      df_train:
        artifactType:
          schemaTitle: system.Dataset
          schemaVersion: 0.0.1
  outputDefinitions:
    artifacts:
      dataset_test:
        artifactType:
          schemaTitle: system.Dataset
          schemaVersion: 0.0.1
      dataset_train:
        artifactType:
          schemaTitle: system.Dataset
          schemaVersion: 0.0.1
schemaVersion: 2.1.0
sdkVersion: kfp-2.7.0
