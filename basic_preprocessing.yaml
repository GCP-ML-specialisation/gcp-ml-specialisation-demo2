# PIPELINE DEFINITION
# Name: basic-preprocessing
# Inputs:
#    bucket_URI: str
#    folder: str
#    test: str
#    train: str
# Outputs:
#    dataset_test: system.Dataset
#    dataset_train: system.Dataset
components:
  comp-basic-preprocessing:
    executorLabel: exec-basic-preprocessing
    inputDefinitions:
      parameters:
        bucket_URI:
          parameterType: STRING
        folder:
          parameterType: STRING
        test:
          parameterType: STRING
        train:
          parameterType: STRING
    outputDefinitions:
      artifacts:
        dataset_test:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
        dataset_train:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
deploymentSpec:
  executors:
    exec-basic-preprocessing:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - basic_preprocessing
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.7.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'pandas' 'gcsfs'\
          \ 'scikit-learn==1.3.0' 'numpy==1.23.5' && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef basic_preprocessing(\n    bucket_URI: str,\n    folder: str,\n\
          \    train: str,\n    test: str,\n    dataset_train: Output[Dataset],\n\
          \    dataset_test: Output[Dataset],\n):\n\n    import pandas as pd\n\n \
          \   df_train_uri = \"\".join([bucket_URI, folder, train])\n    df_test_uri\
          \ = \"\".join([bucket_URI, folder, test])\n\n    df_train = pd.read_csv(df_train_uri)\n\
          \    df_test = pd.read_csv(df_test_uri)\n\n    df_train[\"Stay_In_Current_City_Years\"\
          ] = df_train[\n        \"Stay_In_Current_City_Years\"\n    ].str.replace(\"\
          +\", \"\")\n    df_train[\"Stay_In_Current_City_Years\"] = df_train[\n \
          \       \"Stay_In_Current_City_Years\"\n    ].astype(int)\n\n    df_test[\"\
          Stay_In_Current_City_Years\"] = df_test[\n        \"Stay_In_Current_City_Years\"\
          \n    ].str.replace(\"+\", \"\")\n    df_test[\"Stay_In_Current_City_Years\"\
          ] = df_test[\n        \"Stay_In_Current_City_Years\"\n    ].astype(int)\n\
          \n    ## Dropping User_id and Product_ID\n    df_train = df_train.drop(\"\
          User_ID\", axis=1)\n    df_test = df_test.drop(\"User_ID\", axis=1)\n  \
          \  df_train = df_train.drop(\"Product_ID\", axis=1)\n    df_test = df_test.drop(\"\
          Product_ID\", axis=1)\n\n    df_train = df_train.drop(\"Product_Category_3\"\
          , axis=1)\n    df_test = df_test.drop(\"Product_Category_3\", axis=1)\n\n\
          \    ## Imputing missing values with mode\n    df_train[\"Product_Category_2\"\
          ].mode()[0]\n    df_train[\"Product_Category_2\"] = df_train[\"Product_Category_2\"\
          ].fillna(\n        df_train[\"Product_Category_2\"].mode()[0]\n    )\n\n\
          \    df_test[\"Product_Category_2\"].mode()[0]\n    df_test[\"Product_Category_2\"\
          ] = df_test[\"Product_Category_2\"].fillna(\n        df_test[\"Product_Category_2\"\
          ].mode()[0]\n    )\n\n    df_train.to_csv(dataset_train.path + \".csv\"\
          , index=False)\n    df_test.to_csv(dataset_test.path + \".csv\", index=False)\n\
          \n"
        image: python:3.10
pipelineInfo:
  name: basic-preprocessing
root:
  dag:
    outputs:
      artifacts:
        dataset_test:
          artifactSelectors:
          - outputArtifactKey: dataset_test
            producerSubtask: basic-preprocessing
        dataset_train:
          artifactSelectors:
          - outputArtifactKey: dataset_train
            producerSubtask: basic-preprocessing
    tasks:
      basic-preprocessing:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-basic-preprocessing
        inputs:
          parameters:
            bucket_URI:
              componentInputParameter: bucket_URI
            folder:
              componentInputParameter: folder
            test:
              componentInputParameter: test
            train:
              componentInputParameter: train
        taskInfo:
          name: basic-preprocessing
  inputDefinitions:
    parameters:
      bucket_URI:
        parameterType: STRING
      folder:
        parameterType: STRING
      test:
        parameterType: STRING
      train:
        parameterType: STRING
  outputDefinitions:
    artifacts:
      dataset_test:
        artifactType:
          schemaTitle: system.Dataset
          schemaVersion: 0.0.1
      dataset_train:
        artifactType:
          schemaTitle: system.Dataset
          schemaVersion: 0.0.1
schemaVersion: 2.1.0
sdkVersion: kfp-2.7.0
